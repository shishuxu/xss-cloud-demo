server:
  port: 9010

spring:
  application:
    name: gateway-service
  main:
    #    gateway 内含有Netty	（不基于servlet）应用程序应作为反应式 web 应用程序运行，并应启动嵌入式反应式 web 服务器
    web-application-type: reactive
  config:
    import: application.yml
  cloud:
    nacos:
      username: nacos
      password: nacos
      config:
        import-check:
          enabled: false
      discovery:
        server-addr: http://localhost:8848
    gateway:
      default-filters:
        - name: RequestRateLimiter       #全局 限流过滤器
          args:
            redis-rate-limiter.replenishRate: 100000   # 令牌桶每秒填充速率
            redis-rate-limiter.burstCapacity: 100000   # 令牌桶总容量
            key-resolver: "#{@ipKeyResolver}"   # 使用 SpEL 表达式按名称引用 bean
        - name: Hystrix                  #全局熔断
          args:
            name: fallbackcmd
            fallbackUri: forward:/fallback   #熔断url
      routes:
        - id: user-service             #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: lb://user-service    #匹配后提供服务的路由地址
          predicates:
            - Path=/user-service/**    #断言，路径相匹配的进行路由
          filters:
            - StripPrefix=1
            - name: RequestRateLimiter       #针对路由 限流过滤器
              args:
                redis-rate-limiter.replenishRate: 10   # 令牌桶每秒填充速率
                redis-rate-limiter.burstCapacity: 10   # 令牌桶总容量
                key-resolver: "#{@ipKeyResolver}"   # 使用 SpEL 表达式按名称引用 bean
        - id: order-service             #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: lb://order-service    #匹配后提供服务的路由地址
          predicates:
            - Path=/order-service/**    #断言，路径相匹配的进行路由
          filters:
            - StripPrefix=1
        - id: seata-order-service             #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: lb://seata-order-service    #匹配后提供服务的路由地址
          predicates:
            - Path=/seata-order-service/**    #断言，路径相匹配的进行路由
          filters:
            - StripPrefix=1
        - id: seata-service             #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: lb://seata-service    #匹配后提供服务的路由地址
          predicates:
            - Path=/seata-service/**    #断言，路径相匹配的进行路由
          filters:
            - StripPrefix=1
#            全局设置
hystrix:
  metrics:
    enabled: false #    开启熔断
    polling-interval-ms: 100000  #    设置hystrix超时时间，默认1000ms
  shareSecurityContext: true   #转移线程

#熔断过滤器 fallbackcmd 超时时间 ,此处的设置优先于上面的全局设置
#hystrix.command.fallbackcmd.execution.isolation.thread.timeoutInMilliseconds: 15000
#hystrix.command.fallbackcmd.default.execution.isolation.semaphore.maxConcurrentRequests: 10
#hystrix.command.fallbackcmd.default.fallback.isolation.semaphore.maxConcurrentRequests: 10


#负载均衡配置
ribbon:
  ReadTimeout: 10000
  ConnectTimeout: 10000
  eager-load:
     clients: seata-service,order-service
order-service:
  ribbon:
    # 负载地址
    listOfServers: lb://order-service
    # 负载轮询策略 RoundRobinRule：简单轮询 AvailabilityFilteringRule 忽略链接失败，并发数过高WeightedResponseTimeRule 权重  ZoneAvoidanceRule 可用性 RandomRule随机 Retry重拾
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule
    # 健康检查（ 需自定义健康检查配置类）
#    NFLoadBalancerPingClassName:

seata-service:
  ribbon:
    # 负载地址
    listOfServers: lb://seata-service
    # 负载轮询策略 RoundRobinRule：简单轮询 AvailabilityFilteringRule 忽略链接失败，并发数过高WeightedResponseTimeRule 权重  ZoneAvoidanceRule 可用性 RandomRule随机 Retry重拾
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule
